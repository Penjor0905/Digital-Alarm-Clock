module Testbench;

 // Inputs
 reg reset;
 reg clk;
 reg [1:0] H_in1;
 reg [3:0] H_in0;
 reg [3:0] M_in1;
 reg [3:0] M_in0;
 reg LD_time;
 reg LD_alarm;
 reg STOP_al;
 reg AL_ON;

 // Outputs
 wire Alarm;
 wire [1:0] H_out1;
 wire [3:0] H_out0;
 wire [3:0] M_out1;
 wire [3:0] M_out0;
 wire [3:0] S_out1;
 wire [3:0] S_out0;

 // Instantiate the Unit Under Test (UUT)
 Aclock uut (
  .reset(reset), 
  .clk(clk), 
  .H_in1(H_in1), 
  .H_in0(H_in0), 
  .M_in1(M_in1), 
  .M_in0(M_in0), 
  .LD_time(LD_time), 
  .LD_alarm(LD_alarm), 
  .STOP_al(STOP_al), 
  .AL_ON(AL_ON), 
  .Alarm(Alarm), 
  .H_out1(H_out1), 
  .H_out0(H_out0), 
  .M_out1(M_out1), 
  .M_out0(M_out0), 
  .S_out1(S_out1), 
  .S_out0(S_out0)
 );

 // Generate clock signal with realistic timing
 initial begin 
  clk = 0;
  forever #50 clk = ~clk;  // Adjusted period if necessary
 end

 initial begin
  // Initialize Inputs
  $monitor("Time: %0t | H_out1=%b, H_out0=%b, M_out1=%b, M_out0=%b, S_out1=%b, S_out0=%b, Alarm=%b", 
           $time, H_out1, H_out0, M_out1, M_out0, S_out1, S_out0, Alarm);

  reset = 1;
  H_in1 = 1;
  H_in0 = 0;
  M_in1 = 1;
  M_in0 = 9;
  LD_time = 0;
  LD_alarm = 0;
  STOP_al = 0;
  AL_ON = 0;

  // Apply reset for a sufficient time
  #200;
  reset = 0;
  
  // Load the initial time value
  LD_time = 1;
  #1000;    // Increased delay for stability
  LD_time = 0;
  
  // Set up alarm time and enable alarm
  H_in1 = 1;
  H_in0 = 0;
  M_in1 = 2;
  M_in0 = 0;
  LD_alarm = 1;
  AL_ON = 1;
  #1000;
  LD_alarm = 0;
  
  // Wait for Alarm signal to go high and then stop alarm
  wait(Alarm == 1);
  
  // Delay to observe alarm status before stopping
  #200;
  STOP_al = 1;
  #100;
  STOP_al = 0;

  // Final simulation duration
  #500;
  $stop;
 end
endmodule
